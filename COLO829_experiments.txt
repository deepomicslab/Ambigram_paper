1. sv+seg => lh: python ../../../SVAS/scripts/csv_sv.py call --sv_fn=../COLO829_1_sv.txt  --seg_fn=../COLO829_1_seg.txt --sample=COLO829_1
2. check reachability: ~/localhap/localHap --op check --juncdb ./COLO829_1.1.junc.db --in_lh ./COLO829_1.1.lh  --out_lh COLO829_1.1.checked.lh --lp_prefix COLO829_1.1 --verbose
3. solve SV copy numbers: cbc COLO829_1.1.lp solve solu COLO829_1.1.sol
4. generate balanced lh: python ../../localhaptgs/script/main.py parseILP -i COLO829_1.1.checked.lh -s COLO829_1.1.sol -o COLO829_1.1.balance.lh
5. (optional) add PROP into balance.lh: e.g. PROP    M:chr3  I:chr3:chr10:chr12  C:chr3:chr6 S:3:4
6. run bfb: ~/localhap/localHap --op bfb --in_lh ./COLO829_1.1.balance.lh --lp_prefix COLO829_1 --verbose

call sv:
~/svaba/bin/svaba run -p 8 -t PE_30x.bam -a PE_30x -G ~/bfb_expr/hg19.fa --override-reference-check
python ~/SVAS/scripts/parse_svaba.py call --sv_fn=./PE_30x.svaba.unfiltered.sv.vcf
python ~/localhap/localhaptgs/script/main.py vcf2sv -i ./PE_30x.svaba.unfiltered.sv.vcf.txt -o PE_30x_sv.txt

sniffles -m ONT.bam -v ONT.vcf --report_BND -s 5 -d 200
python ~/localhap/localhaptgs/script/main.py parse_snif_vcf -i ONT.vcf -o ONT_sv.txt


Extract third-generation information:
1. pbindex PB_5x.bam
2. bam2fasta -o PB_5x PB_5x.bam
3. gunzip PB_5x.fasta.gz
4. python ~/hpvpipe/main.py process_tgs -r ~/bfb_expr/hg19.fa -l sample1_PB_5x.1.lh -t PB_5x.fasta -o ./
or
samtools bam2fq ONT_5x.bam | seqtk seq -A > ONT_5x.fasta